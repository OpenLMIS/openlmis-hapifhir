buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id "org.flywaydb.flyway" version "8.0.5"
    id "org.sonarqube" version "3.3"
    id "com.moowork.node" version "1.2.0"
    id 'org.springframework.boot' version '2.4.13'
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'checkstyle'
apply plugin: 'jacoco'
apply plugin: 'pmd'

group = serviceGroup
version = serviceVersion
archivesBaseName = rootProject.name
project.ext.buildTime = java.time.Instant.now().toString() // for versioning
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-web"
    compile "org.springframework.boot:spring-boot-starter-data-jpa"
    compile "org.postgresql:postgresql:42.6.2"

    compile "org.projectlombok:lombok"
    annotationProcessor "org.projectlombok:lombok:1.18.22"
    testAnnotationProcessor "org.projectlombok:lombok:1.18.22"

    compile "org.springframework:spring-test"
    compile 'org.webjars.npm:api-console:3.0.17'
    compile 'org.openlmis:openlmis-service-util:3.0.0'
    compile 'org.apache.commons:commons-lang3:3.6'
    compile 'commons-beanutils:commons-beanutils:1.9.3'

    compile 'org.flywaydb:flyway-core:8.0.5'
    compile "org.springframework.security.oauth:spring-security-oauth2:2.3.5.RELEASE"
    compile "org.slf4j:slf4j-ext:1.7.25"

    compile 'org.thymeleaf:thymeleaf-spring5:3.0.11.RELEASE'

    compile 'ca.uhn.hapi.fhir:hapi-fhir-base:4.1.0'
    compile ('ca.uhn.hapi.fhir:hapi-fhir-jpaserver-base:4.1.0') {
        exclude group: 'com.github.dnault', module: 'xml-patch'
    }
    compile 'com.github.dnault:xml-patch:0.3.1'
    compile 'ca.uhn.hapi.fhir:hapi-fhir-client-okhttp:4.1.0'
    compile 'ca.uhn.hapi.fhir:hapi-fhir-jaxrsserver-base:4.1.0'
    compile 'org.apache.commons:commons-dbcp2:2.1.1'

    compile 'com.bedatadriven:jackson-datatype-jts:2.2'

    testCompile "junit:junit"
    testCompile "org.mockito:mockito-core:1.+"
    testCompile "org.springframework.boot:spring-boot-starter-test"

    testCompile "io.rest-assured:rest-assured:3.3.0"
    testCompile "guru.nidi.raml:raml-tester:0.9.1"

    testCompile "nl.jqno.equalsverifier:equalsverifier:2.4"
    testCompile "be.joengenduvel.java.verifiers:to-string:1.0.2"
}

idea {
    project {
        vcs = 'Git'
        ipr.withXml { xmlFile ->
            // enable 'Annotation Processors', source: https://gist.github.com/stephanos/8645809
            xmlFile.asNode().component
                    .find { it.@name == 'CompilerConfiguration' }['annotationProcessing'][0]
                    .replaceNode {
                annotationProcessing {
                    profile(default: true, name: 'Default', useClasspath: 'true', enabled: true)
                }
            }
        }
    /*    iml.withXml { xmlFile ->
            xmlFile.asNode().component.find { it.@name == 'NewModuleRootManager'}['Content'][0]
                .addNode {
                sourceFolder {
                    profile(url: "file://$MODULE_DIR\$/src/integration-test/java", isTestSource:
                            true)
                }
            }
        }*/
    }
    module {
        sourceDirs -= file('src/integration-test/java')
        testSourceDirs += file('src/integration-test/java')
    }
}

flyway {
    url = "$System.env.DATABASE_URL"
    user = "$System.env.POSTGRES_USER"
    password = "$System.env.POSTGRES_PASSWORD"
    schemas = ['hapifhir']
    sqlMigrationPrefix = ''
    placeholderPrefix = '#['
    placeholderSuffix = ']'
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }

    main {
        resources {
            srcDirs "src/main/resources", "build/data"
        }
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = 'full'
    }
    mustRunAfter test
    environment 'BASE_URL', "http://localhost"
}

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
    reports.junitXml.destination = file("${testResultsDir}/${name}")
}

// Usage: gradle generateMigration [-PmigrationName=name_of_migration]
//          Defaults to 'migration' as migration name
// Example: gradle generateMigration -PmigrationName=add_column_to_users
//          Will create a file in migration folder with name yyyyMMddHHmmssSSS_add_column_to_users.sql.
task generateMigration {
    doLast {
        description 'Creates an empty new file within the src/main/resources/db/migration directory into which developers can add new SQL migration code.'
        def fileName = project.hasProperty('migrationName') ? migrationName : 'migration'
        def timestamp = new Date().format('yyyyMMddHHmmssSSS', TimeZone.getTimeZone('GMT'))
        def fullFileName = "${timestamp}__${fileName}.sql"
        def migrationFile = new File(sourceSets.main.resources.srcDirs.first(), 'db/migration/' + fullFileName)
        migrationFile << "-- WHEN COMMITTING OR REVIEWING THIS FILE: Make sure that the timestamp in the file name (that serves as a version) is the latest timestamp, and that no new migration have been added in the meanwhile.\n"
        migrationFile << "-- Adding migrations out of order may cause this migration to never execute or behave in an unexpected way.\n"
        migrationFile << "-- Migrations should NOT BE EDITED. Add a new migration to apply changes."
        migrationFile.createNewFile()
    }
}

task demoDataSeed(type:Exec) {
    executable "./demo-data/demo_seed.sh"
    args "demo-data", "build/data/demo-data", "demo-data/generator.js"
}

task checkApiIsRaml(type:Exec) {
    executable "raml-cop"
    args "src/main/resources/api-definition.yaml"
}

configure(checkApiIsRaml) {
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = 'Verify that the api-specification is valid RAML'
}

jacocoTestReport {
    dependsOn integrationTest, test
    group = "reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
    }

    executionData file("$buildDir/jacoco/test.exec"), file("$buildDir/jacoco/integrationTest.exec")
    additionalSourceDirs.setFrom(files(sourceSets.main.allJava.srcDirs))
}

checkstyle {
    toolVersion = "8.12"
}

//NOTE: This plugin requires that this task be named 'sonarqube'. In fact, it is performing SonarCloud analysis.
sonarqube {
    properties {
        property "sonar.projectKey", "OpenLMIS_openlmis-hapifhir"
        property "sonar.organization", "openlmis"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.java.source", "17"
        property "sonar.coverage.jacoco.xmlReportPaths", "./report.xml"
    }
}

pmd {
    toolVersion = '6.55.0'
    consoleOutput= true
    ignoreFailures = true
    ruleSetFiles = files("config/pmd/ruleset.xml")
    reportsDir = file("build/reports/pmd")
}

tasks.withType(Pmd){
    reports {
        xml.enabled true
        html.enabled true
    }
}


test {
    testLogging {
        events 'started', 'passed'
        exceptionFormat = 'full'
    }
}

apply from: "documentation.gradle"
integrationTest.dependsOn copyRamlToBuild

processResources {
    dependsOn demoDataSeed

    // we want the generated HTML spec file included in the output jar
    finalizedBy ramlToHtml

    // update version information in build
    filesMatching('**/version.properties') {
        expand(project.properties)
    }
}

apply from: "registration.gradle"

assemble {
    dependsOn ramlToHtml
    dependsOn copyRamlHtmlToBuild
    dependsOn copyConsulRegistrationToBuild
    dependsOn jacocoTestReport
}

check {
    dependsOn ramlToHtml
    dependsOn copyRamlHtmlToBuild
    dependsOn integrationTest
    dependsOn copyConsulRegistrationToBuild
}

build {
    dependsOn jacocoTestReport
    dependsOn check
}
